const chaiExec = require("@jsdevtools/chai-exec");
const helpersHttp = require('./tests/chai-http');
var chai = require('chai');
var expect = chai.expect;

describe("The rate limit for free sub users", function() {
  let user = 'user2';
  let password = 'password';
  let keycloak_svc = chaiExec("kubectl -n keycloak get service keycloak -o jsonpath='{.status.loadBalancer.ingress[0].ip}'").stdout.replaceAll("'", "");
  let keycloak_client_id = chaiExec("kubectl -n gloo-system get authconfig oauth -o jsonpath='{.spec.configs[0].oauth2.oidcAuthorizationCode.clientId}'").stdout.replaceAll("'", "");
  let keycloak_client_secret_base64 = chaiExec("kubectl -n gloo-system get secret oauth -o jsonpath='{.data.oauth}'").stdout.replaceAll("'", "");
  let buff = new Buffer(keycloak_client_secret_base64, 'base64');
  let keycloak_client_secret = buff.toString('ascii').split(' ')[1].trim();
  let keycloak_token = JSON.parse(chaiExec('curl -d "client_id=' + keycloak_client_id + '" -d "client_secret=' + keycloak_client_secret + '" -d "scope=openid" -d "username=' + user + '" -d "password=' + password + '" -d "grant_type=password" "http://' + keycloak_svc + ':8080/auth/realms/master/protocol/openid-connect/token"').stdout.replaceAll("'", "")).id_token;
  
  it("have only 2 requests per minute", () => {
    helpersHttp.checkURL({ host: "https://httpbin.{{ vars.sample_domain }}", headers: [{key: 'Authorization', value: 'Bearer ' + keycloak_token}], retCode: 200 });
    helpersHttp.checkURL({ host: "https://httpbin.{{ vars.sample_domain }}", headers: [{key: 'Authorization', value: 'Bearer ' + keycloak_token}], retCode: 200 });
    helpersHttp.checkURL({ host: "https://httpbin.{{ vars.sample_domain }}", headers: [{key: 'Authorization', value: 'Bearer ' + keycloak_token}], retCode: 429 });
  });
});

describe("The rate limit for enterprise sub users", function() {
  let user = 'user1';
  let password = 'password';
  let keycloak_svc = chaiExec("kubectl -n keycloak get service keycloak -o jsonpath='{.status.loadBalancer.ingress[0].ip}'").stdout.replaceAll("'", "");
  let keycloak_client_id = chaiExec("kubectl -n gloo-system get authconfig oauth -o jsonpath='{.spec.configs[0].oauth2.oidcAuthorizationCode.clientId}'").stdout.replaceAll("'", "");
  let keycloak_client_secret_base64 = chaiExec("kubectl -n gloo-system get secret oauth -o jsonpath='{.data.oauth}'").stdout.replaceAll("'", "");
  let buff = new Buffer(keycloak_client_secret_base64, 'base64');
  let keycloak_client_secret = buff.toString('ascii').split(' ')[1].trim();
  let keycloak_token = JSON.parse(chaiExec('curl -d "client_id=' + keycloak_client_id + '" -d "client_secret=' + keycloak_client_secret + '" -d "scope=openid" -d "username=' + user + '" -d "password=' + password + '" -d "grant_type=password" "http://' + keycloak_svc + ':8080/auth/realms/master/protocol/openid-connect/token"').stdout.replaceAll("'", "")).id_token;
  
  it("have only 8 requests per minute", () => {

    for (let i = 0; i < 8; i++) {
      helpersHttp.checkURL({ host: "https://httpbin.{{ vars.sample_domain }}", headers: [{key: 'Authorization', value: 'Bearer ' + keycloak_token}], retCode: 200 });
    }
    
    helpersHttp.checkURL({ host: "https://httpbin.{{ vars.sample_domain }}", headers: [{key: 'Authorization', value: 'Bearer ' + keycloak_token}], retCode: 429 });
  });
});