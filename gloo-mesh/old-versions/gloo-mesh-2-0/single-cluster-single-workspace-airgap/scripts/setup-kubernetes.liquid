#!/bin/bash

# Install dependencies in /tmp
cat <<EOF >/tmp/package.json
{% render 'package.json' %}
EOF

# Render common libraries
mkdir -p /tmp/tests
{%- assign files = config.dir | append: '/tests' | listFiles %}
{%- for file in files %}
{%- assign filePath = config.dir | append: '/tests/' | append: file %}
cat <<EOF >/tmp/tests/{{ file | remove: ".liquid" }}
{% render filePath %}
EOF
{%- endfor %}

cp -r node_modules/ /tmp/node_modules/

ln -s /root/.nvm/versions/node/*/bin/node -t /usr/local/sbin
ln -s /root/.nvm/versions/node/*/bin/mocha -t /usr/local/sbin
ln -s /root/.nvm/versions/node/*/bin/npm -t /usr/local/sbin

pushd /tmp
/root/.nvm/versions/node/*/bin/npm install
popd

touch /root/.env
{%- if vars.single_cluster != true %}
echo "export KUBECONFIG=/root/.kube/mgmt:/root/.kube/cluster1:/root/.kube/cluster2" >> /root/.env

source /root/.env

for i in {1..100}; do
  kubectl --context=cluster1 label node cluster1 ingress-ready=true topology.kubernetes.io/region=us-west topology.kubernetes.io/zone=us-west-1 && break
  sleep 5
done

for i in {1..100}; do
  kubectl --context=cluster2 label node cluster2 ingress-ready=true topology.kubernetes.io/region=us-west topology.kubernetes.io/zone=us-west-2 && break
  sleep 5
done
{% endif %}

{% if vars.saveLocalVariables %}
cat <<EOF >/usr/bin/save-environment.sh
# Export current variables
export >> /root/.env
touch /tmp/environment-saved
# Remove duplicates
cp /root/.env /root/.env.previous
awk '!seen[\$0]++' /root/.env.previous > /root/.env
EOF
chmod +x /usr/bin/save-environment.sh

apt update && apt -y install gdb

cat <<'EOF' >/root/penv.gdb
set variable $foo = (char **) environ
set $i = 0
while ($foo[$i] != 0)
print $foo[$i++]
end
EOF

cat <<'EOF' >/root/penv.sh
trap "exec /root/penv.sh;" INT TERM
while true; do
  sleep 5
  [[ $(($(date +%s)-$(stat -c '%Y' /root/.env))) -gt 5 ]] || continue
  gdb -x /root/penv.gdb -p $PPID -q --batch 2>null  | grep '^\$' | awk -F\" '{ print $2 }' | awk -F= '{ print "export "$1"=\""$2"\"" }' > /tmp/.env
  cp /tmp/.env /root/.env
done
EOF

chmod +x /root/penv.sh

cat <<'EOF' >>/etc/bash.bashrc
source /root/.env
/root/penv.sh &
EOF
{% endif %}
{% raw %}
cat <<ENDFILE >/usr/bin/find-translation.sh
#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT 

script_dir=\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
    cat <<EOF
Usage: \$(basename "\${BASH_SOURCE[0]}") [-h] name namespace kubecontext

This script will print out any Istio resources it can find corresponding to the Gloo Mesh Enterprise name.
The name and namespace arguments are required.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "\${NO_COLOR-}" ]] && [[ "\${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "\${1-}"
}

die() {
    local msg=\$1
    local code=\${2-1} # default exit status 1
    msg "\$msg"
    exit "\$code"
}

parse_params() {
    # default values of variables set from params
    name=''
    namespace=''

    while :; do
        case "\${1-}" in 
        -h | --help) usage ;;
        -v | --verbose) set -x ;;
        --no-color) NO_COLOR=1 ;;
        -?*) die "Unknown option: \$1" ;;
        *) break ;;
        esac
        shift
    done

    args=("\$@")

    # check required params and arguments
    [[ \${#args[@]} -lt 2 ]] && die "Missing required arguments.  Must have name and namespace"

    return 0
}

parse_params "\$@"
setup_colors

name="\${args[0]}"
namespace="\${args[1]}"
kubecontext="\${args[2]-\$(kubectl config current-context)}"

# Script logic
echo "Looking for Istio translation for \${name} in ns=\${namespace}" and cluster=\${kubecontext}
for crd in \`kubectl --context \${kubecontext} get crd | grep istio | cut -f 1 -d ' '\`; do 
    echo "Looking for objects of type \${crd}"
    kubectl --context \${kubecontext} get \${crd} -l gloo.solo.io/parent_name=\${name} -l gloo.solo.io/parent_namespace=\${namespace} -A --ignore-not-found=true
done


# Cleanup
cleanup
ENDFILE
{% endraw %}
chmod +x /usr/bin/find-translation.sh

echo 'cd /root' >> /etc/bash.bashrc